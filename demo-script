Installing a cluster on Azure via UPI, using ARM templates

REF: https://docs.openshift.com/container-platform/4.5/installing/installing_azure/installing-azure-user-infra.html

Login to Azure = az login (account must have access to create objects in the resource group)
Create Service Principal Acct (contributor for the resource group)


BEGIN SETUP
./openshift-install create install-config --dir=azure

** Note, Azure is not case sensitive, but OpenShift and AWS are ** 
Since the Resource group is all-caps, it should be all caps in the manifests and environment variables.

export CLUSTER_NAME=redwagon
export AZURE_REGION=eastus
export BASE_DOMAIN=shifting.red
export BASE_DOMAIN_RESOURCE_GROUP=RED-HAT-OCP001
export KUBECONFIG=/home/shaker/azure/redwagon/auth/kubeconfig
export SSH_KEY="ssh-rsa ..."

./openshift-install create manifests --dir=azure

rm -f azure/openshift/99_openshift-cluster-api_master-machines-*.yaml
rm -f azure/openshift/99_openshift-cluster-api_worker-machineset-*.yaml


Replace self-generated resource-group with target resource-group in azure/manifests/{cluster-dns-02-config.yml,cloud-provider-config.yaml}

Record the infrastructure id and verify resource groups in azure/manifests/cluster-infrastructure-02-config.yml

export INFRA_ID=redwagon-2vncr
export RESOURCE_GROUP=redwagon-rg


01. Create IGNITION files 
./openshift-install create ignition-configs --dir=azure


02. Create the Azure IDENTITY
az identity create -g ${RESOURCE_GROUP} -n ${INFRA_ID}-identity

export PRINCIPAL_ID=`az identity show -g ${RESOURCE_GROUP} -n ${INFRA_ID}-identity --query principalId --out tsv`
export RESOURCE_GROUP_ID=`az group show -g ${RESOURCE_GROUP} --query id --out tsv`

az role assignment create --assignee "${PRINCIPAL_ID}" --role 'Contributor' --scope "${RESOURCE_GROUP_ID}"



03. Upload RHCOS image and BOOTSTRAP.IGN file.
az storage account create -g ${RESOURCE_GROUP} --location ${AZURE_REGION} --name shiftingsa --kind Storage --sku Standard_LRS

export ACCOUNT_KEY=`az storage account keys list -g ${RESOURCE_GROUP} --account-name shiftingsa --query "[0].value" -o tsv`
export VHD_URL=`curl -s https://raw.githubusercontent.com/openshift/installer/release-4.5/data/data/rhcos.json | jq -r .azure.url`

az storage container create --name vhd --account-name shiftingsa --account-key ${ACCOUNT_KEY}
az storage blob copy start --account-name shiftingsa --account-key ${ACCOUNT_KEY} --destination-blob "rhcos.vhd" --destination-container vhd --source-uri "${VHD_URL}"


* Wait for upload to complete:

status="unknown"
while [ "$status" != "success" ]
do
  status=`az storage blob show --container-name vhd --name "rhcos.vhd" --account-name shiftingsa --account-key ${ACCOUNT_KEY} -o tsv --query properties.copy.status`
  echo $status
done


az storage container create --name files --account-name shiftingsa --account-key ${ACCOUNT_KEY} --public-access blob
az storage blob upload --account-name shiftingsa --account-key ${ACCOUNT_KEY} -c "files" -f "redwagon/bootstrap.ign" -n "bootstrap.ign"




04. Create a new PRIVATE-DNS zone.
az network private-dns zone create -g ${RESOURCE_GROUP} -n ${CLUSTER_NAME}.${BASE_DOMAIN}



05. Setup VNET
az deployment group create -g ${RESOURCE_GROUP} --template-file "01_vnet.json" --parameters baseName="${INFRA_ID}"
az network private-dns link vnet create -g ${RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n ${INFRA_ID}-network-link -v "${INFRA_ID}-vnet" -e false

export VHD_BLOB_URL=`az storage blob url --account-name shiftingsa --account-key ${ACCOUNT_KEY} -c vhd -n "rhcos.vhd" -o tsv`



06. Setup access to STORAGE BLOB
az deployment group create -g ${RESOURCE_GROUP} --template-file "02_storage.json" --parameters vhdBlobURL="${VHD_BLOB_URL}" --parameters baseName="${INFRA_ID}"



07. Setup INFRA LOAD-BALANCERS & DNS
az deployment group create -g ${RESOURCE_GROUP}  --template-file "03_infra.json"  --parameters privateDNSZoneName="${CLUSTER_NAME}.${BASE_DOMAIN}"  --parameters baseName="${INFRA_ID}"



export PUBLIC_IP=`az network public-ip list -g ${RESOURCE_GROUP} --query "[?name=='${INFRA_ID}-master-pip'] | [0].ipAddress" -o tsv`
az network dns record-set a add-record -g ${BASE_DOMAIN_RESOURCE_GROUP} -z ${BASE_DOMAIN} -n api.${CLUSTER_NAME} -a ${PUBLIC_IP} --ttl 60


08. Setup the BOOTSTRAP NODE

export BOOTSTRAP_URL=`az storage blob url --account-name shiftingsa --account-key ${ACCOUNT_KEY} -c "files" -n "bootstrap.ign" -o tsv`
export BOOTSTRAP_IGNITION=`jq -rcnM --arg v "2.2.0" --arg url ${BOOTSTRAP_URL} '{ignition:{version:$v,config:{replace:{source:$url}}}}' | base64 -w0`


az deployment group create -g ${RESOURCE_GROUP} --template-file "04_bootstrap.json" --parameters bootstrapIgnition="${BOOTSTRAP_IGNITION}" --parameters sshKeyData="${SSH_KEY}" --parameters baseName="${INFRA_ID}" 


09. Setup the MASTER NODES

export MASTER_IGNITION=`cat redwagon/master.ign | base64 -w0`

az deployment group create -g ${RESOURCE_GROUP} --template-file "05_masters.json" --parameters masterIgnition="${MASTER_IGNITION}" --parameters sshKeyData="${SSH_KEY}" --parameters privateDNSZoneName="${CLUSTER_NAME}.${BASE_DOMAIN}" --parameters baseName="${INFRA_ID}"


** Monitor progress **
./openshift-install wait-for bootstrap-complete --dir=redwagon --log-level info


10. Setup the WORKER NODES

export WORKER_IGNITION=`cat redwagon/worker.ign | base64 -w0`

az deployment group create -g ${RESOURCE_GROUP} --template-file "06_workers.json" --parameters workerIgnition="${WORKER_IGNITION}" --parameters sshKeyData="${SSH_KEY}" --parameters baseName="${INFRA_ID}" 



11. Approve WORKER certificate requests, twice. 
Each worker node will submit a request marked 'Pending' two times, each certificate must be approved.

oc get csr | grep Pending
oc adm certificate approve csr-XXXXX csr-XXXXX csr-XXXXX
